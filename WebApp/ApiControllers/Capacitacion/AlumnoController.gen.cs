//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Radarc (http://radarc.net) - Radarc version: 4.9.1.22813 Formula: UNIR.1.1 version: 1.1
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
//     If you want to extend or modify the code use the designated extension points / user escapes as described in the product documentation.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using Unir.Architecture.SuperTypes.PresentationBase.Controllers;
using Unir.Architecture.SuperTypes.PresentationBase.ActionsParameters;
using Unir.Architecture.SuperTypes.PresentationBase.Attributes;
using Unir.Architecture.SuperTypes.PresentationBase.Attributes.ParametersPersistence;
using Unir.Architecture.SuperTypes.ApplicationServicesBase.Dto;
using Unir.Architecture.SuperTypes.ApplicationServicesBase.AppServicesUtility;
using Unir.ErpAcademico.ApplicationServices.Capacitacion.Dto.Alumnos;
using Unir.ErpAcademico.ApplicationServices.Capacitacion.Services;
using Unir.ErpAcademico.ApplicationServices.Capacitacion.Services.Specifications.Alumnos;
using Unir.ErpAcademico.WebCapacitaciones.Parameters.Capacitacion.Alumno;

namespace Unir.ErpAcademico.WebCapacitaciones.ApiControllers.Capacitacion
{
	public class AlumnoControllerBase : ApiControllerSuperType
	{
        protected readonly IAlumnosAppServices ServicesAlumnos;

        public AlumnoControllerBase(IAlumnosAppServices servicesAlumnos)
        {
            if (servicesAlumnos == null)
                throw new ArgumentNullException("servicesAlumnos");

            ServicesAlumnos = servicesAlumnos;
        }

        #region Lectura

        /// <summary>
        /// Devuelve el contenido de un objeto: Alumno
        /// </summary>
        /// <param name="id">Identificador de la entidad</param>
        /// <returns>El objeto Alumno o un error en caso de no existir</returns>
        [HttpGet]
		[Route("{id}", Name = "GetAlumno")]
		[HttpModuleOperationAuthorize("Alumno: ver")]
		public virtual IHttpActionResult Get(int id)
        {
			var result = ServicesAlumnos.GetAlumno(id);

            if (result.Type == ResultType.Ok && result.Element != null)
            {
                return Ok(result.Element);
            }
            return ResultWithMessages(result);
        }

        /// <summary>
        /// Devuelve los resultados de una "Búsqueda Avanzada" la cual consta de Filtrado, Proyección y Ordenacion Multiple
        /// </summary>
        /// <remarks>
        /// Almacena el objeto enviado como parámetro en el sistema de Estados de Presentación
        /// </remarks>
        /// <param name="parameters">Parámetros de la búsqueda</param>
        /// <returns>Los resultados.</returns>
        [HttpPost]
		[Route("advanced-search")]
        [HttpSaveParameters("AlumnosMainListParams")]
		[HttpModuleOperationAuthorize("Alumno: listar")]
		public virtual IHttpActionResult AdvancedSearch(AlumnosListParameters parameters)
        {
            var pagination = parameters.GetPaginationInfo(AlumnosOrderColumn.Nombres);

            var specification = new AlumnosListSpecification
            {
                FilterNombres = parameters.FilterNombres,
                FilterApellidos = parameters.FilterApellidos,
                FilterNombresApellidos = parameters.FilterNombresApellidos,
                FilterFechaNacimiento = new RangeFilterValues<DateTime?>
                { 
                    From = parameters.FilterFechaNacimientoFrom,
                    To = parameters.FilterFechaNacimientoTo
                },
                Pagination = pagination
            };

            var result = ServicesAlumnos.GetPagedAlumnos(specification);

            if (!result.HasErrors)
            {
                return OkPagedList(result);
            }
            return ResultWithMessages(result);
        }
		

        #endregion

        #region Persistencia

        /// <summary>
        /// Añade un nuevo recurso/objeto: Alumno.
        /// </summary>
        /// <param name="parameters">Los valores de la nueva instancia a almacenar</param>
        /// <returns>La información del objeto creado. Error y Mensajes si dicha operación no se pudo completar</returns>
        [HttpPost]
        [Route("")]
        [HttpSaveResultData("Id", "DisplayName")]
		[HttpModuleOperationAuthorize("Alumno: guardar")]
		public virtual IHttpActionResult New(AlumnoSaveParameters parameters)
        {
            var alumno = new AlumnoDto();

			// Copiar los valores				
            alumno.Nombres = parameters.Nombres;
            alumno.Apellidos = parameters.Apellidos;
            alumno.FechaNacimiento = parameters.FechaNacimiento;

            var result = ServicesAlumnos.NewAlumno(alumno);

            if (result.HasErrors)
			{
				return ResultWithMessages(result);
			}

            if (result.Type == ResultType.ElementCreated
                && result.Element != null)
            {
                return Created(
                    Url.Link("GetAlumno", new { id = result.Element.Id }),
                    new
                    {
                        Id = result.Element.Id,
                        alumno.DisplayName
                    });
			}
			return Ok();			
        }

        /// <summary>
        /// Modifica un recurso/objeto: Alumno existente.
        /// </summary>
	    /// <param name="id">Identificador del elemento a Editar</param>		
        /// <param name="parameters">Los nuevos valores a establecer en la instancia existente</param>
        /// <returns>OK, si la operación se pudo completar con exito. NotFound o Conflict en caso de Error</returns>
        [HttpPut]
        [Route("{id}")]
        [HttpSaveResultData("Id", "DisplayName")]
		[HttpModuleOperationAuthorize("Alumno: guardar")]
		public virtual IHttpActionResult Modify(int id, AlumnoSaveParameters parameters)
        {
            var alumno = new AlumnoDto();

			// Copiar los valores				
            alumno.Nombres = parameters.Nombres;
            alumno.Apellidos = parameters.Apellidos;
            alumno.FechaNacimiento = parameters.FechaNacimiento;

			// Copiar el valor del Id de la Entidad
            alumno.Id = id;

            var result = ServicesAlumnos.ModifyAlumno(alumno);

            if (result.HasErrors)
			{
				return ResultWithMessages(result);
			}

			return Ok(new
				{
					Id = alumno.Id,
					alumno.DisplayName
				});
        }

        /// <summary>
        /// Elimina uno o varios recursos/objetos: Alumno existentes.
        /// </summary>
        /// <param name="parameters">Identificadores de los objetos que se desean eliminar del almacenamiento</param>
        /// <returns>OK, si la operación se pudo completar con exito. NotFound o Conflict en caso de Error</returns>
        [HttpPost]
		[Route("delete")]
		[HttpModuleOperationAuthorize("Alumno: eliminar")]
        public virtual IHttpActionResult Delete(MultiSelectActionParameters parameters)
        {
            var result = ServicesAlumnos.DeleteAlumnos(parameters.Ids.ToArray());

            if (result.Type == ResultType.Ok
				&& !result.HasErrors)
            {
                return Ok();
            }
            return ResultWithMessages(result);
        }

        /// <summary>
        /// Intenta Clonar uno o varios recursos/objetos: Alumno existentes.
        /// </summary>
        /// <param name="parameters">Identificadores de los objetos que se desean clonar</param>
        /// <returns>OK, si la operación se pudo completar con exito. NotFound o Conflict en caso de Error</returns>
        [HttpPost]
		[Route("clone")]
		[HttpModuleOperationAuthorize("Alumno: clonar")]
        public virtual IHttpActionResult Clone(MultiSelectActionParameters parameters)
        {
            var result = ServicesAlumnos.CloneAlumnos(parameters.Ids.ToArray());

            if (result.Type == ResultType.Ok
				&& !result.HasErrors)
            {
                return Ok();
            }
            return ResultWithMessages(result);
        }

		#endregion
	}
}
