//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Radarc (http://radarc.net) - Radarc version: 4.9.1.22813 Formula: UNIR.1.1 version: 1.1
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
//     If you want to extend or modify the code use the designated extension points / user escapes as described in the product documentation.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Unir.Architecture.SuperTypes.ApplicationServicesBase;
using Unir.Architecture.SuperTypes.ApplicationServicesBase.AppServicesUtility.Resources;
using Unir.Architecture.SuperTypes.ApplicationServicesBase.Dto;
using Unir.Architecture.SuperTypes.DomainBase.Extensions;
using Unir.ErpAcademico.ApplicationServices.Capacitacion.Dto.Alumnos;
using Unir.ErpAcademico.ApplicationServices.Capacitacion.Services.Specifications.Alumnos;
using Unir.ErpAcademico.DomainModules.Capacitacion.Aggregates.Alumnos;
using Unir.ErpAcademico.ApplicationServices.Capacitacion.Globalization;

namespace Unir.ErpAcademico.ApplicationServices.Capacitacion.Services.Impl
{
    public class AlumnosAppServicesBase : CommonApplicationServices
    {
        protected IAlumnosRepository RepoAlumnos { get { return RepositoryResolver.Resolve<IAlumnosRepository>(); } }

        #region Alumnos

        #region Lectura

        public virtual ResultListDto<AlumnoDto> GetPagedAlumnos(AlumnosListSpecification specification)
        {
            var result = new ResultListDto<AlumnoDto>();

            var lista = RepoAlumnos.GetPagedFiltered(specification);

            if (lista != null)
            {
                result.Elements = lista.Elements;
                result.TotalElements = lista.TotalElements;
                result.TotalPages = lista.TotalPages;
            }

            return result;
        }

        public virtual ResultSingleDto<AlumnoDto> GetAlumno(int idAlumno)
        {
            var result = new ResultSingleDto<AlumnoDto>();

            var alumno = RepoAlumnos.Get(idAlumno);
            if (alumno == null)
            {
                result.Type = ResultType.ElementNotFound;
                result.Errors.Add(AlumnosStrings.ErrorNoAlumno);
            }
            else
            {
                result.Element = alumno.ProjectedAs<AlumnoDto>();
            }

            return result;
        }

        #endregion Lectura

        #region Persistencia

        public virtual ResultSingleDto<AlumnoDto> NewAlumno(AlumnoDto alumno)
        {
            var result = new ResultSingleDto<AlumnoDto>();
            var unitOfWork = RepoAlumnos.UnitOfWork;

            var alumnoNew = new Alumno
            {
                Nombres = alumno.Nombres,
                Apellidos = alumno.Apellidos,
                FechaNacimiento = alumno.FechaNacimiento,
            };

            // Finalmente hacer las validaciones de Dominio (Definidas en las Entidades)
            var domainValidation = alumnoNew.Validate();
            bool existName = RepoAlumnos.GetFiltered(x => x.Nombres.ToLower().Equals(alumno.Nombres.ToLower())).HasAny();
            if (domainValidation.HasErrors || existName)
            {
                if (existName)
                {
                    domainValidation.AddValidationError($"El Nombre: {alumno.Nombres} fue registrado anteriormente, ingrese otro nombre.");
                }
                result.Type = ResultType.ElementConflict;

                result.LoadFromDomainResult(domainValidation);
                return result;
            }

            RepoAlumnos.Add(alumnoNew);

            // Ejecutar procedimiento previo a la persitencia y posterior a la validación y asignación.
            if (!NewAlumnoPreCommit(alumno, alumnoNew, result))
            {
                unitOfWork.RollbackChanges();
                return result;
            }

            unitOfWork.Commit();
            result.Element = alumnoNew.ProjectedAs<AlumnoDto>();
            result.Type = ResultType.ElementCreated;

            return result;
        }



        public virtual ResultValidation ModifyAlumno(AlumnoDto alumno)
        {
            var result = new ResultValidation();
            var unitOfWork = RepoAlumnos.UnitOfWork;


            // Verificar estado de Persistencia.
            var persisted = RepoAlumnos.Get(alumno.Id);
            if (persisted == null)
            {
                result.Type = ResultType.ElementNotFound;
                result.Errors.Add(AlumnosStrings.ErrorNoAlumno);
                return result;
            }

            // Acciones personalizadas previas a la asignación nuevos valores.
            ModifyAlumnoPreAssign(alumno, persisted);

            // Asignar los valores.
            persisted.Nombres = alumno.Nombres;
            persisted.Apellidos = alumno.Apellidos;
            persisted.FechaNacimiento = alumno.FechaNacimiento;

            // Finalmente hacer las validaciones de Dominio (Definidas en las Entidades)
            var domainValidation = persisted.Validate();
            if (domainValidation.HasErrors)
            {
                result.Type = ResultType.ElementConflict;
                result.LoadFromDomainResult(domainValidation);
                return result;
            }

            // Ejecutar procedimiento previo a la persitencia y posterior a la validación y asignación.
            if (!ModifyAlumnoPreCommit(alumno, persisted, result))
            {
                return result;
            }

            unitOfWork.Commit();

            return result;
        }

        public virtual ResultPrimitiveValue<int[]> DeleteAlumnos(int[] ids)
        {
            var result = new ResultPrimitiveValue<int[]>();
            var unirOfWork = RepoAlumnos.UnitOfWork;

            var deleted = new List<int>();

            var entities = RepoAlumnos.GetFiltered(p => ids.Contains(p.Id)).GetLazyList();
            foreach (var alumno in entities)
            {

                // Validar con el código personalizado a nivel de Servicio de Aplicación y hacer acciones específicas
                // previas a iniciar el seguimiento de esta entidad por parte de la Unidad de Trabajo.
                if (!DeleteAlumnoPreTrack(alumno, result))
                {
                    continue;
                }
                RepoAlumnos.Remove(alumno);
                deleted.Add(alumno.Id);
            }

            // Ejecutar procedimiento previo a la persitencia y posterior a la validación.
            if (!DeleteAlumnosPreCommit(result))
            {
                return result;
            }

            unirOfWork.Commit();
            result.Value = deleted.ToArray();

            return result;
        }

        public virtual ResultPrimitiveValue<int[]> CloneAlumnos(int[] ids)
        {
            var result = new ResultPrimitiveValue<int[]>();
            var unitOfWork = RepoAlumnos.UnitOfWork;

            var cloned = new List<Alumno>();
            foreach (var id in ids)
            {
                var alumno = RepoAlumnos.Get(id);
                // Clonar

                var alumnoNew = new Alumno
                {
                    Nombres = alumno.Nombres,
                    Apellidos = alumno.Apellidos,
                    FechaNacimiento = alumno.FechaNacimiento,
                };

                // Acciones Post-Asignación
                if (!CloneAlumnoAfterAssign(alumno, alumnoNew, result))
                {
                    continue;
                }

                RepoAlumnos.Add(alumnoNew);
                cloned.Add(alumnoNew);
            }
            unitOfWork.Commit();

            result.Value = cloned.Select(c => c.Id).ToArray();
            return result;
        }

        #region Intercepción de procedimientos de Persistencia

        /// <summary>
        /// Si se sobreescribe este método, se garantiza su ejecución justo antes de acometerse los cambios del procedimiento New Alumno.
        /// </summary>
        /// <remarks>
        /// Debe asumirse que en caso de llegarse a invocar este método, se da por sentado que todas las validaciones y asignaciones fueron completadas exitosamente.
        /// Usualmente pueden especificarse validaciones personalizadas y/o asignaciones o eliminaciones extraordinarias, según la lógica de negocio.
        /// </remarks>
        /// <param name="alumnoDto">Objeto de trasferencia de datos con la información originalmente enviada desde capas superiores.</param>
        /// <param name="alumnoNew">La entidad con todos las propiedades asignadas, listo para ser añadido en el sistema de persistencia.</param>
        /// <param name="result">La referencia al objeto 'result' del procedimiento New.</param>
        /// <returns>False si el resultado de la ejecución de este método condujo a un error de validación (el cual debería ser añadido en la referencia correspondiente)</returns>
        protected virtual bool NewAlumnoPreCommit(AlumnoDto alumnoDto, Alumno alumnoNew, BaseResultDto result)
        {
            return true;
        }

        /// <summary>
        /// Si se sobreescribe este método, se garantiza su ejecución justo antes de asignarse los valores de las porpiedades 
        /// enviadas desde capas superiores por medio de objetos Dto, a la referencia del objeto existente en el sistema de persistencia.
        /// </summary>
        /// <remarks>
        /// Debe asumirse que el siguiente paso tras la ejecución de este método es la de asignar cada uno de los valores del objeto Dto
        /// en sus propiedades correspondientes del objeto persistido en Base de Datos. De aquí se infiere que modificando los valores 
        /// de la referencia al objeto Dto pasado como argumento, afectería posteriormente el valor modificado al objeto persistido.
        /// </remarks>
        /// <param name="alumnoDto">Objeto de trasferencia de datos con la información originalmente enviada desde capas superiores.</param>
        /// <param name="persisted">El estado de la entidad a persistir, justo antes de modificarsele sus valores.</param>
        protected virtual void ModifyAlumnoPreAssign(AlumnoDto alumnoDto, Alumno persisted)
        {
        }

        /// <summary>
        /// Si se sobreescribe este método, se garantiza su ejecución justo antes de acometerse los cambios del procedimiento Modify Alumno.
        /// </summary>
        /// <remarks>
        /// Debe asumirse que en caso de llegarse a invocar este método, se da por sentado que todas las validaciones y asignaciones fueron completadas exitosamente.
        /// Usualmente pueden especificarse validaciones personalizadas y/o asignaciones o eliminaciones extraordinarias, según la lógica de negocio.
        /// </remarks>
        /// <param name="alumnoDto">Objeto de trasferencia de datos con la información originalmente enviada desde capas superiores.</param>
        /// <param name="persisted">El estado actual de la entidad a persistir. Se presume que para el instante en que este método es invocado, 
        /// ya se han transferido los valores de las propiedades que se desean modificar en el sistema de persistencia</param>
        /// <param name="result">La referencia al objeto 'result' del procedimiento Modify.</param>
        /// <returns>False si el resultado de la ejecución de este método condujo a un error de validación (el cual debería ser añadido en la referencia correspondiente)</returns>
        protected virtual bool ModifyAlumnoPreCommit(AlumnoDto alumnoDto, Alumno persisted, BaseResultDto result)
        {
            return true;
        }

        /// <summary>
        /// Si se sobreescribe este método, se garantiza su ejecución justo antes de añadirse a la Unidad de Trabajo la accíón de Eliminar un Alumno
        /// </summary>
        /// <remarks>
        /// Un resultado 'false' de la ejecución de este método, acompañado de uno o más errores añadidos a la referencia result pasada como argumento,
        /// significaría abortar automáticamente el proceso de registro de la entidad relacionada en la cola de eliminación, y proceder a la siguiente iteración.
        /// </remarks>
        /// <param name="alumno">Referencia a la entidad alumno que se analiza en la iteración de eliminación.</param>
        /// <param name="result">La referencia al objeto 'result' del procedimiento Delete.</param>
        /// <returns>False si el resultado de la ejecución de este método condujo a un error de validación (el cual debería ser añadido en la referencia correspondiente)</returns>
        protected virtual bool DeleteAlumnoPreTrack(Alumno alumno, BaseResultDto result)
        {
            return true;
        }

        /// <summary>
        /// Si se sobreescribe este método, se garantiza su ejecución justo antes de acometerse los cambios del procedimiento Delete Alumno.
        /// </summary>
        /// <param name="result">La referencia al objeto 'result' del procedimiento New.</param>
        /// <returns>False si el resultado de la ejecución de este método condujo a un error de validación (el cual debería ser añadido en la referencia correspondiente)</returns>
        protected virtual bool DeleteAlumnosPreCommit(BaseResultDto result)
        {
            return true;
        }

        /// <summary>
        /// Si se sobreescribe este método, se garantiza su ejecución justo después de asignarse los valores de las porpiedades 
        /// de un objeto existente, al nuevo, construído para ser una copia idéntica del anterior.
        /// </summary>
        /// <param name="source">El objeto persistido.</param>
        /// <param name="destination">El nuevo objeto creado como una copia idéntica del anterior.</param>
        /// <param name="result">La referencia al objeto 'result' del procedimiento Clone.</param>
        /// <returns>False si el resultado de la ejecución de este método condujo a un error de validación (el cual debería ser añadido en la referencia correspondiente)</returns>
        protected virtual bool CloneAlumnoAfterAssign(Alumno source, Alumno destination, BaseResultDto result)
        {
            return true;
        }

        #endregion

        #endregion Persistencia

        #endregion Alumnos
    }
}
